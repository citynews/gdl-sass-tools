// scss-lint:disable PropertySortOrder VendorPrefix
// $MIXINS ------------------------------------------------------------------ //
@import 'maps';

// Clearfix ------------------------------------------------------------------//
//
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Gradient ------------------------------------------------------------------//
//
@mixin gradient {
  background-image: linear-gradient(-180deg, rgba(33,33,33,0.00) 0%, rgba(33,33,33,0.67) 30%, $color-black 100%);
}

// Media queries -------------------------------------------------------------//

// Breakpoint media query
// @mixin bp($breakpoint) {
//   @media (min-width: map-get($breakpoints, $breakpoint)) {
//     @content
//   }
// };

@mixin bp($bp, $rule: min-width) {
  @media screen and (#{$rule}: map-get($breakpoints, $bp)) {
      @content;
  }
}


// Landscape orientation media query
@mixin orientation($orientation) {
  @if $orientation == landscape {
    @media only screen and (orientation: landscape) {
      @content
    }
  } @else {
      @media only screen and (orientation: portrait) {
        @content
      }
  }
};

// Flexbox SASS mixins--------------------------------------------------------//
// The spec: http://www.w3.org/TR/css3-flexbox

// Flexbox display
@mixin flexbox() {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
  -ms-flex-flow: $flow;
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-flex-order: $val;
  -ms-flex-order: $val;
  order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
  -ms-flex-positive: $grow;
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  -webkit-flex-grow: $shrink;
  -ms-flex-negative: $shrink;
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
  -ms-flex-preferred-size: $width;
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
  justify-content: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  -webkit-justify-content: $align;
  -ms-flex-pack: $align;
  justify-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
  -ms-align-items: $align;
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  -webkit-align-self: $align;
  -ms-flex-item-align: $align;
  align-self: $align;
}

// Layer Element -------------------------------------------------------------//
//
@mixin layer($position: relative, $width: 100%, $height:100%, $display: block) {
  display: $display;
  position: $position;
  top: 0;
  left: 0;
  width: $width;
  height: $height;
  content: '';
}

// Transform -----------------------------------------------------------------//
//
@mixin transform($value) {
  -webkit-transform: $value;
  transform: $value;
}

// Transition ----------------------------------------------------------------//
//
@mixin transition($transition...) {
  -webkit-transition: $transition;
  transition:         $transition;
}

// Z-index -------------------------------------------------------------------//
//
@mixin z($key){
  @if map-has-key($z-index, $key) {
    z-index: map-get($z-index, $key);
  }
  @else {
    z-index: $key;
  }
}


// Backface visibility property --------------------------------------------- //

@mixin backface-visibility($visibility) {
  @include prefixer(backface-visibility, $visibility, webkit spec);
}

// Borders settings  -------------------------------------------------------- //

@mixin border-box($boxsizing: border-box) {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

@mixin border-top-radius($radii) {
  border-top-left-radius: $radii;
  border-top-right-radius: $radii;
}

@mixin border-right-radius($radii) {
  border-bottom-right-radius: $radii;
  border-top-right-radius: $radii;
}

@mixin border-bottom-radius($radii) {
  border-bottom-left-radius: $radii;
  border-bottom-right-radius: $radii;
}

@mixin border-left-radius($radii) {
  border-bottom-left-radius: $radii;
  border-top-left-radius: $radii;
}

@mixin rounded($radius) {
  -webkit-border-radius : $radius;
  -moz-border-radius : $radius;
  border-radius : $radius;
}

// Box shadow --------------------------------------------------------------- //

@mixin box-shadow($shadow) {
  -webkit-box-shadow : $shadow;
  -moz-box-shadow : $shadow;
  box-shadow : $shadow;
}

// Columns ------------------------------------------------------------------ //

@mixin columns($arg: auto) {
  @include prefixer(columns, $arg, webkit moz spec);
}

@mixin column-count($int: auto) {
  @include prefixer(column-count, $int, webkit moz spec);
}

@mixin column-gap($length: normal) {
  @include prefixer(column-gap, $length, webkit moz spec);
}

@mixin column-fill($arg: auto) {
  @include prefixer(column-fill, $arg, webkit moz spec);
}

@mixin column-rule($arg) {
  @include prefixer(column-rule, $arg, webkit moz spec);
}

@mixin column-rule-color($color) {
  @include prefixer(column-rule-color, $color, webkit moz spec);
}

@mixin column-rule-style($style: none) {
  @include prefixer(column-rule-style, $style, webkit moz spec);
}

@mixin column-rule-width ($width: none) {
  @include prefixer(column-rule-width, $width, webkit moz spec);
}

@mixin column-span($arg: none) {
  @include prefixer(column-span, $arg, webkit moz spec);
}

@mixin column-width($length: auto) {
  @include prefixer(column-width, $length, webkit moz spec);
}

// User-select -------------------------------------------------------------- //

@mixin user-select($value: none) {
  @include prefixer(user-select, $value, webkit moz ms spec);
}

// Prefixer ----------------------------------------------------------------- //

$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default;

@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    } @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    } @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    } @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    } @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    } @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

// Appearance property ------------------------------------------------------ //

@mixin appearance($value) {
  @include prefixer(appearance, $value, webkit moz ms o spec);
}

// Background image --------------------------------------------------------- //

@mixin  bgimg($position,$repeat,$size) {
  background-position: $position;
  background-repeat: $repeat;
  background-size: $size;
}

// Border -------------------------------------------------------------------- //

@mixin border($width,$style) {
  border-style: $style;
  border-width: $widh;
}


// Position ----------------------------------------------------------------- //

@mixin position ($position, $top, $right, $left, $bottom) {
  position: $position;
  top:$top;
  right:$right;
  left: $left;
  bottom:$bottom;
}